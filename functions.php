<?php
/*
* Generated By Orbisius Child Theme Creator - your favorite plugin for Child Theme creation :)
* https://wordpress.org/plugins/orbisius-child-theme-creator/
*
* Unlike style.css, the functions.php of a child theme does not override its counterpart from the parent.
* Instead, it is loaded in addition to the parentâ€™s functions.php. (Specifically, it is loaded right before the parent theme's functions.php).
* Source: http://codex.wordpress.org/Child_Themes#Using_functions.php
*
* Be sure not to define functions, that already exist in the parent theme!
* A common pattern is to prefix function names with the (child) theme name.
* Also if the parent theme supports pluggable functions you can use function_exists( 'put_the_function_name_here' ) checks.
*/
//Change INI Settings, might not working
@ini_set( 'upload_max_size' , '16M' );
@ini_set( 'post_max_size', '16M');
@ini_set( 'max_execution_time', '300' );

// Add the legacy metaboxes
include_once('framework/legacy_metaboxes.php');

// Add the Admin Menu Pages
include_once('framework/RationalOptionPages.php');
include_once('framework/maxfu_custom_admin_menu.php');

// Add the Custom Pages and Metaboxes
include_once('framework/maxfu_custom_posts.php');
include_once('framework/maxfu_custom_metabox.php');

// Add the MaxFu Customiser Pages
include_once('framework/maxfu_custom_customiser.php');

// Add the Customsed Image Sizes
if ( ! function_exists( 'macland_image_sizes' ) ) :
function macland_image_sizes() {
  add_image_size( 'macland-project-featured', 720, 450, true );
	add_image_size( 'macland-project-slider', 1280, 800, true );
	add_image_size( 'macland-project-slider-thumb', 320, 200, true );
  add_image_size( 'macland-agents-featured', 480, 640, true );
  add_image_size( 'macland-news-featured', 720, 450, true );
}
endif;
add_action( 'after_setup_theme', 'macland_image_sizes' );

// Add Custom Functions
// Image Resize Function
if(!function_exists('vt_resize')){
  function vt_resize($attach_id = null, $img_url = null, $width, $height, $crop = false){
  if($attach_id){
    // this is an attachment, so we have the ID
    $image_src = wp_get_attachment_image_src($attach_id, 'full');
    $file_path = get_attached_file($attach_id);
  } elseif($img_url){
    // this is not an attachment, let's use the image url
    $file_path = parse_url($img_url);
    $file_path = $_SERVER['DOCUMENT_ROOT'].$file_path['path'];
    // Look for Multisite Path
    if(file_exists($file_path) === false){
      global $blog_id;
      $file_path = parse_url($img_url);
      if(preg_match('/files/', $file_path['path'])){
        $path = explode('/', $file_path['path']);
        foreach($path as $k => $v){
          if($v == 'files'){
            $path[$k-1] = 'wp-content/blogs.dir/'.$blog_id;
          }
        }
        $path = implode('/', $path);
      }
      $file_path = $_SERVER['DOCUMENT_ROOT'].$path;
    }
    //$file_path = ltrim( $file_path['path'], '/' );
    //$file_path = rtrim( ABSPATH, '/' ).$file_path['path'];
    $orig_size = getimagesize($file_path);
    $image_src[0] = $img_url;
    $image_src[1] = $orig_size[0];
    $image_src[2] = $orig_size[1];
  }
  $file_info = pathinfo($file_path);
  // check if file exists
  $base_file = $file_info['dirname'].'/'.$file_info['filename'].'.'.$file_info['extension'];
  if(!file_exists($base_file))
  return;
  $extension = '.'. $file_info['extension'];
  // the image path without the extension
  $no_ext_path = $file_info['dirname'].'/'.$file_info['filename'];
  $cropped_img_path = $no_ext_path.'-'.$width.'x'.$height.$extension;
  // checking if the file size is larger than the target size
  // if it is smaller or the same size, stop right here and return
  if($image_src[1] > $width){
    // the file is larger, check if the resized version already exists (for $crop = true but will also work for $crop = false if the sizes match)
    if(file_exists($cropped_img_path)){
      $cropped_img_url = str_replace(basename($image_src[0]), basename($cropped_img_path), $image_src[0]);
      $vt_image = array(
        'url'   => $cropped_img_url,
        'width' => $width,
        'height'    => $height
      );
      return $vt_image;
    }
    // $crop = false or no height set
    if($crop == false OR !$height){
      // calculate the size proportionaly
      $proportional_size = wp_constrain_dimensions($image_src[1], $image_src[2], $width, $height);
      $resized_img_path = $no_ext_path.'-'.$proportional_size[0].'x'.$proportional_size[1].$extension;
      // checking if the file already exists
      if(file_exists($resized_img_path)){
        $resized_img_url = str_replace(basename($image_src[0]), basename($resized_img_path), $image_src[0]);
        $vt_image = array(
          'url'   => $resized_img_url,
          'width' => $proportional_size[0],
          'height'    => $proportional_size[1]
        );
        return $vt_image;
      }
    }
    // check if image width is smaller than set width
    $img_size = getimagesize($file_path);
    if($img_size[0] <= $width) $width = $img_size[0];
    // Check if GD Library installed
    if(!function_exists('imagecreatetruecolor')){
      echo 'GD Library Error: imagecreatetruecolor does not exist - please contact your webhost and ask them to install the GD library';
      return;
    }
    // no cache files - let's finally resize it
    $new_img_path = image_resize($file_path, $width, $height, $crop);
    $new_img_size = getimagesize($new_img_path);
    $new_img = str_replace(basename($image_src[0]), basename($new_img_path), $image_src[0]);
    // resized output
    $vt_image = array(
      'url'   => $new_img,
      'width' => $new_img_size[0],
      'height'    => $new_img_size[1]
    );
    return $vt_image;
    }
    // default output - without resizing
    $vt_image = array(
      'url'   => $image_src[0],
      'width' => $width,
      'height'    => $height
    );
    return $vt_image;
  }
}

// Put post_id in to a array
function maxfu_get_postids( $args )
{
  $the_query = new WP_Query( $args );
  if ( $the_query->have_posts() ) {
    $x = 0;
    while ( $the_query->have_posts() ) {
      $the_query->the_post();
      $x ++;
      $new_postids[$x] = get_the_ID();
    }
    $new_postids[0] = $x;
  }
  wp_reset_postdata();
  return $new_postids;
}

add_filter('wp_nav_menu_items','add_search_box', 10, 2);
function add_search_box($items, $args) {
  ob_start();
  get_search_form();
  $searchform = ob_get_contents();
  ob_end_clean();
  $items .= '<li id="menu-item-search" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-search">' . $searchform . '</li>';
  return $items;
}

/**
 * Filter HTML code and leave allowed/disallowed tags only
 *
 * @param string 	$text 	Input HTML code.
 * @param string 	$tags 	Filtered tags.
 * @param bool 		$invert Define whether should leave or remove tags.
 * @return string Filtered tags
 */
function theme_strip_tags_content($text, $tags = '', $invert = false) {

    preg_match_all( '/<(.+?)[\s]*\/?[\s]*>/si', trim( $tags ), $tags );
    $tags = array_unique( $tags[1] );

    if ( is_array( $tags ) AND count( $tags ) > 0 ) {
        if ( false == $invert ) {
            return preg_replace( '@<(?!(?:'. implode( '|', $tags ) .')\b)(\w+)\b.*?>.*?</\1>@si', '', $text );
        }
        else {
            return preg_replace( '@<('. implode( '|', $tags ) .')\b.*?>.*?</\1>@si', '', $text );
        }
    }
    elseif ( false == $invert ) {
        return preg_replace( '@<(\w+)\b.*?>.*?</\1>@si', '', $text );
    }

    return $text;
}

/**
 * Generate script tags from given source code
 *
 * @param string $source HTML code.
 * @return string Filtered HTML code with script tags only
 */
function theme_insert_js($source) {

    $out = '';

    $fragment = new DOMDocument();
    $fragment->loadHTML( $source );

    $xp = new DOMXPath( $fragment );
    $result = $xp->query( '//script' );

    $scripts = array();
    $scripts_src = array();
    foreach ( $result as $key => $el ) {
        $src = $result->item( $key )->attributes->getNamedItem( 'src' )->value;
        if ( ! empty( $src ) ) {
            $scripts_src[] = $src;
        } else {
            $type = $result->item( $key )->attributes->getNamedItem( 'type' )->value;
            if ( empty( $type ) ) {
                $type = 'text/javascript';
            }

            $scripts[$type][] = $el->nodeValue;
        }
    }

    //used by inline code and rich snippets type like application/ld+json
    foreach ( $scripts as $key => $value ) {
        $out .= '<script type="'.$key.'">';

        foreach ( $value as $keyC => $valueC ) {
            $out .= "\n".$valueC;
        }

        $out .= '</script>';
    }

    //external script
    foreach ( $scripts_src as $value ) {
        $out .= '<script src="'.$value.'"></script>';
    }

    return $out;
}
